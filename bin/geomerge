#!/usr/bin/env node

var fs = require("fs");

var JSONStream = require("JSONStream");
var through2 = require("through2");
var targetGeometry = {type: "", coordinates: []};

var startWritten = false;

process.stdin
  .pipe(JSONStream.parse('features.*.geometry'))
  .pipe(through2.obj(function (sourceGeometry, enc, callback) {
    if (!sourceGeometry) return; // ignore null

    var sourceType = sourceGeometry.type,
      targetType = /^Multi/.test(sourceType) ? sourceType : "Multi" + sourceType;

    if (!startWritten) {
      process.stdout.write('{"type":"' + targetType + '","coordinates":');
      startWritten = true;
    }

    if (!targetGeometry.type) targetGeometry.type = targetType;
    else if (targetGeometry.type !== targetType) throw new Error("incompatible types: " + targetType + " != " + targetGeometry.type);

    switch (sourceType) {
      case "MultiPolygon":
      case "MultiLineString": {
        sourceGeometry.coordinates.forEach(function(coordinates) { this.push(coordinates); }.bind(this));
        callback();
        break;
      }
      case "Polygon":
      case "LineString": {
        this.push(sourceGeometry.coordinates);
        callback();
        break;
      }
      default: {
        callback(new Error("unsupported type: " + g.type));
      }
    }
  }))
  .pipe(JSONStream.stringify("[", ",", "]"))
  .pipe(process.stdout)
  .on("end", function () {
    process.stdout.write("}");
  });
